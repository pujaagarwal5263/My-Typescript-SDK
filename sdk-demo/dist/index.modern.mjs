import t from"isomorphic-unfetch";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])}return t},e.apply(this,arguments)}class o{constructor(t){this.apikey=void 0,this.baseUrl=void 0,this.apikey=t.apiKey,this.baseUrl=t.baseUrl||"https://jsonplaceholder.typicode.com"}invoke(o,r){const s=`${this.baseUrl}${o}`,n=e({},r,{headers:{"Content-Type":"application/json","api-key":this.apikey}});return t(s,n).then(t=>{if(t.ok)return t.json();throw new Error(t.statusText)}).catch(t=>{console.log(t)})}}class r extends o{}var s;s=r,[class extends o{getPostById(t){return this.invoke(`/posts/${t}`)}getPosts(){return this.invoke("/posts")}createPost(t){return this.invoke("posts",{method:"POST",body:JSON.stringify(t)})}}].forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(e=>{Object.defineProperty(s.prototype,e,Object.getOwnPropertyDescriptor(t.prototype,e)||Object.create(null))})});export{r as default};
